import { SignInButton, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { LoadingPage } from "~/components/loading";
import { api, type RouterOutputs } from "~/utils/api";

// This component is responsible for rendering the create post input
const CreatePostWizard = () => {
  const { user } = useUser();
  const trpcCacheContext = api.useContext();
  const { mutate: createPost, isLoading: isPosting } =
    api.posts.create.useMutation({
      onSuccess: () => {
        setInput("");
        void trpcCacheContext.posts.invalidate();
      },
    });
  const [input, setInput] = useState("");

  if (!user) return null;
  return (
    <div className="flex w-full gap-3">
      <Image
        className="h-14 w-14 rounded-full"
        src={user.profileImageUrl}
        alt="User profile image"
        width={56}
        height={56}
        placeholder="blur"
        blurDataURL={user?.profileImageUrl}
      />
      <input
        className="grow bg-transparent outline-none"
        placeholder="Trill some emojis!"
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
      />
      <button onClick={() => createPost({ content: input })}>Post</button>
    </div>
  );
};

// This is a type that combines the post and author data
type PostWithAuthor = RouterOutputs["posts"]["getAll"][number];
// This component is responsible for rendering a single post
const PostView = (props: PostWithAuthor) => {
  const { post, author } = props;
  dayjs.extend(relativeTime);
  return (
    <div key={post.id} className="flex gap-3 border-b border-slate-400 p-4">
      <Image
        src={author.profileImageUrl}
        alt={`@${author.username}'s profile image`}
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
        placeholder="blur"
        blurDataURL={author.profileImageUrl}
      />
      <div className="flex flex-col">
        <div className="flex gap-1 font-medium text-slate-300">
          <span>{`@${author.username}`}</span>
          <span className="font-normal">{` Â· ${dayjs(
            post.createdAt
          ).fromNow()}`}</span>
        </div>
        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  );
};

// This component is responsible for fetching the posts and rendering them
const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();
  if (postsLoading) return <LoadingPage />;
  if (!data) return <div>Something went wrong</div>;
  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView key={fullPost.post.id} {...fullPost} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();
  // Start fetching ASAP
  api.posts.getAll.useQuery();
  // Return empty div if user is not loaded
  if (!userLoaded) return <div />;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
